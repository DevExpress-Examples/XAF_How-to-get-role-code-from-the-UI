<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="RoleGeneratorSpace" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Updating;
using DevExpress.Persistent.Base;
<#
foreach(string nameSpace in NameSpacesCodeLines){#>
using <#= nameSpace #>;
<# } #>

namespace YourNameSpace {
	public class RoleUpdater : ModuleUpdater {
		public RoleUpdater(IObjectSpace objectSpace, Version currentDBVersion) :
			base(objectSpace, currentDBVersion) {
		}
		public override void UpdateDatabaseAfterUpdateSchema() {
			base.UpdateDatabaseAfterUpdateSchema();
<#
foreach(var method in CodeLines){#>
			Create<#= method.Key #>Role();
<# } #>
			ObjectSpace.CommitChanges();
		}
<#
foreach(var method in CodeLines){#>
		public void Create<#= method.Key #>Role() {
			<#= RoleTypeName #> role = ObjectSpace.FindObject<<#= RoleTypeName #>>(new BinaryOperator("Name", "<#= method.Key #>"));
			if(role == null) {
				role = ObjectSpace.CreateObject<<#= RoleTypeName #>>();
<#
	foreach(string codeLine in method.Value){#>
				<#= codeLine #>
<#}#>
			}
		}
<#}#>
	}
}

<#+
    public HashSet<string> NameSpacesCodeLines { get; set; }
    public Dictionary<string, List<string>> CodeLines { get; set; }
    public string RoleTypeName { get; set; }
#>